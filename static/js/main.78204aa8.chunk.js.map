{"version":3,"sources":["component/Item.js","component/ListWrapper.js","component/InputItem.js","App.js","serviceWorker.js","index.js"],"names":["Item","_this","this","_this$props$data","props","data","name","done","index","react_default","a","createElement","className","onClick","crossTodo","deleteTodo","Component","ListWrapper","renderList","map","d","component_Item","key","Inputitem","state","item","handleChange","e","_e$target","target","value","setState","Object","defineProperty","handleSubmit","preventDefault","AddTodo","onSubmit","type","placeholder","onChange","App","newItem","newdata","concat","toConsumableArray","id","console","log","newTodos","splice","InputItem","component_ListWrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQA6BeA,0LAtBF,IAAAC,EAAAC,KAAAC,EACkBD,KAAKE,MAAMC,KAA3BC,EADFH,EACEG,KAAOC,EADTJ,EACSI,KACRC,EAAON,KAAKE,MAAMI,MAExB,OACOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAK,aAAa,QACjCE,EAAAC,EAAAC,cAAA,cAAML,EAAN,KACAG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACAE,QAAS,WAAKZ,EAAKG,MAAMU,UAAUN,KAElCD,EAAa,UAAR,SAEPE,EAAAC,EAAAC,cAAA,UACAE,QAAS,kBAAIZ,EAAKG,MAAMW,WAAWP,KADnC,iBAjBIQ,cCeJC,mLAbF,IAAAhB,EAAAC,KAEDgB,EAAahB,KAAKE,MAAMC,KAAKc,IAAI,SAACC,EAAEZ,GACrC,OAAQC,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKd,EAAOH,KAAMe,EAAGZ,MAAOA,EAAQM,UAAWb,EAAKG,MAAMU,UAAWC,WAAYd,EAAKG,MAAMW,eAE7G,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVM,UARSF,oBCgCXO,6MAjCXC,MAAQ,CACJC,KAAK,MAERC,aAAa,SAACC,GAAI,IAAAC,EACMD,EAAEE,OAAhBvB,EADQsB,EACRtB,KAAMwB,EADEF,EACFE,MACZ7B,EAAK8B,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACK1B,EAAMwB,OAIfI,aAAa,SAACP,GACXA,EAAEQ,iBAEFlC,EAAKG,MAAMgC,QAAQnC,EAAKuB,MAAMC,+EAK9B,OACKhB,EAAAC,EAAAC,cAAA,QAAM0B,SAAUnC,KAAKgC,cACjBzB,EAAAC,EAAAC,cAAA,SACG2B,KAAK,OACLhC,KAAK,OACLwB,MAAO5B,KAAKsB,MAAMC,KAClBc,YAAY,aACZC,SAAUtC,KAAKwB,aACfd,UAAU,UAEbH,EAAAC,EAAAC,cAAA,6BA7BOK,aC4DTyB,6MAtDbjB,MAAM,CACJnB,KAAM,CACJ,CAACC,KAAO,gBAAiBC,MAAK,GAC9B,CAACD,KAAO,eAAgBC,MAAK,GAC7B,CAACD,KAAO,gBAAiBC,MAAK,GAC9B,CAACD,KAAO,gBAAiBC,MAAK,OAIlC6B,QAAQ,SAACX,GAEP,IAAIiB,EAAS,CAACpC,KAAOmB,EAAMlB,MAAK,GAC1BoC,EAAO,GAAAC,OAAAZ,OAAAa,EAAA,EAAAb,CAAM/B,EAAKuB,MAAMnB,MAAjB,CAAuBqC,IACrCzC,EAAK8B,SAAS,CACZ1B,KAAKsC,OAMR7B,UAAU,SAACgC,GACTC,QAAQC,IAAIF,GACZ,IAAMG,EAAQjB,OAAAa,EAAA,EAAAb,CAAO/B,EAAKuB,MAAMnB,MAC7B4C,EAASH,GAAIvC,KACd0C,EAASH,GAAIvC,MAAO,EAEpB0C,EAASH,GAAIvC,MAAO,EAG1BN,EAAK8B,SAAS,CACR1B,KAAK4C,OAKTlC,WAAW,SAAC+B,GACV,IAAMG,EAAQjB,OAAAa,EAAA,EAAAb,CAAO/B,EAAKuB,MAAMnB,MAChC4C,EAASC,OAAOJ,EAAG,GACnB7C,EAAK8B,SAAS,CACZ1B,KAAK4C,6EAMP,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwC,EAAD,CAAWf,QAASlC,KAAKkC,UACzB3B,EAAAC,EAAAC,cAACyC,EAAD,CAAa/C,KAAOH,KAAKsB,MAAMnB,KAAOS,UAAWZ,KAAKY,UAAWC,WAAYb,KAAKa,qBAjDxEC,aCKEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78204aa8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Item extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        const {name , done } = this.props.data;\r\n        const index= this.props.index;\r\n        \r\n        return (\r\n               <div className={done?\"item cross\":\"item\"}>\r\n                <h3> {name } </h3>\r\n                <div>\r\n                <button \r\n                onClick={()=>{this.props.crossTodo(index)}}\r\n                >\r\n               {!done?\"cross\":\"uncross\"}\r\n               </button> \r\n               <button \r\n               onClick={()=>this.props.deleteTodo(index)}>\r\n               &times;\r\n               </button>\r\n                </div>\r\n               </div>     );\r\n    }\r\n}\r\n \r\nexport default Item;","import React, { Component } from 'react';\r\n\r\nimport Item from './Item';\r\n\r\nclass ListWrapper extends Component {\r\n    render() { \r\n\r\n        let renderList = this.props.data.map((d,index)=>{\r\n           return( <Item key={index} data={d} index={index}  crossTodo={this.props.crossTodo} deleteTodo={this.props.deleteTodo} />)\r\n        })\r\n        return (\r\n            <div className=\"list-wrapper\">\r\n                {renderList}\r\n            </div>\r\n          )\r\n    }\r\n}\r\n \r\nexport default ListWrapper;","import React, { Component } from 'react';\r\n\r\nclass Inputitem extends Component {\r\n    state = { \r\n        item:\"\"\r\n     }\r\n     handleChange=(e)=>{\r\n         const{name, value}= e.target;\r\n         this.setState({\r\n             [name]:value\r\n         });\r\n     }\r\n\r\n     handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        \r\n        this.props.AddTodo(this.state.item);\r\n     }\r\n\r\n\r\n    render() { \r\n        return (\r\n             <form onSubmit={this.handleSubmit}>\r\n                 <input \r\n                    type=\"text\"\r\n                    name=\"item\"\r\n                    value={this.state.item} \r\n                    placeholder=\"Add a Todo\"\r\n                    onChange={this.handleChange}\r\n                    className=\"input\"\r\n                 />\r\n                 <button>Add</button>\r\n        </form>);\r\n    }\r\n}\r\n \r\nexport default Inputitem;","import React, { Component } from 'react';\nimport './App.css';\n\nimport ListWrapper from './component/ListWrapper';\nimport InputItem from './component/InputItem';\n\n\nclass App extends Component {\n  state={\n    data :[\n      {\"name\":\"learn to talk\", done:false },\n      {\"name\":\"learn to see\", done:true },\n      {\"name\":\"learn to walk\", done:false },\n      {\"name\":\"learn to fuck\", done:false },\n    ]\n  }\n\n  AddTodo=(item)=>{\n    \n    let newItem= {\"name\":item, done:false }\n    const newdata= [...this.state.data, newItem]\n   this.setState({\n     data:newdata\n   })\n   \n  \n  }\n\n  crossTodo=(id)=>{\n    console.log(id);\n    const newTodos = [...this.state.data];\n    if(newTodos[id].done){\n      newTodos[id].done = false;\n    }else{\n      newTodos[id].done = true;\n    }\n    \nthis.setState({\n      data:newTodos\n    })\n    \n    \n  }\n  deleteTodo=(id)=>{\n    const newTodos = [...this.state.data]\n    newTodos.splice(id,1)\n    this.setState({\n      data:newTodos\n    })\n    \n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <InputItem AddTodo={this.AddTodo}  />\n        <ListWrapper data= {this.state.data}  crossTodo={this.crossTodo} deleteTodo={this.deleteTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}